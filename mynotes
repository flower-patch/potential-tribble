  def all_path_ids
    @paths.map {|p| p[:id]}
  end


  def all_paths_coords_split
    @paths.map {|p| p["d"].split}
  end

  def all_paths_styles_split
    @paths.map {|p| p["style"].split(";")}
  end

  def all_paths_fill_values
    array = all_paths_styles_split
    all_fill_values = []
    array.each do |a|
      all_fills = a.map{|s| s if s.start_with?("fill:")}
      fill_string = all_fills.compact![0]
      fill_value = fill_string.scan(/:(\S*$)/)[0][0]
      all_fill_values << fill_value
    end
    all_fill_values
  end

  def all_paths_coord_pairs
    array = all_paths_coords_split
    all_coord_pairs = []
    array.each do |a|
      inner_array = a[1..-2]
      coords_array = []
      inner_array.each do |i|
        coord_pair = i.split(',').map {|x| x.to_f }
        coords_array << coord_pair
      end
      all_coord_pairs << coords_array
    end
    all_coord_pairs
  end

  #works great unless the stroke is in the group
  def remove_path_stroke
    path = @svg.css("path")
    path.each do |p|
      style_array = p["style"].split(';')
      stroke_index = 0
      style_array.each_with_index do |style_attribute, index|
        if style_attribute.start_with?("stroke:")
          stroke_index = index
        end
      end
      # style_array[stroke_index] = ["stroke:red"] use this to test, seems to work
      style_array[stroke_index] = ["stroke:none"]
      new_style = style_array.join(';')
      p["style"] = new_style
    end
    path
  end

  def all_paths_coord_pairs
    array = all_paths_coords_split
    all_coord_pairs = []
    array.each do |a|
      inner_array = a
      coords_array = []
      inner_array.each do |i|
        next if i.match(/[a-zA-Z]/)
        coord_pair = i.split(',').map {|x| x.to_f }
        coords_array << coord_pair
      end
      all_coord_pairs << coords_array
    end
    all_coord_pairs
  end

  # KEA this needs to turn into a method that uses the actual design ids
  def all_unique_image_ids
    all_ids = @paths.map {|p| p['image-id']}
    all_ids.uniq
  end

  # WILL NOT BE THE FIRST PATHS IN THE REAL WORLD...JUST TESTING
  def first_path_style_split_up
    @paths.first["style"].split(";")
  end

  def first_path_coords_split_up
    @paths.first["d"].split
  end

  def first_path_fill_as_string
    array = first_path_style_split_up
    # could have done array[0] but this way it doesn't rely on fill being first
    new_array = array.map{|s| s if s.start_with?("fill:")}
    string = new_array.compact![0]
    string.scan(/:(\S*$)/)[0][0]
  end

  def first_path_coords
    # lop off the m at the start and the z at the end
    array = first_path_coords_split_up[1..-2]
    coords_array = []
    array.each do |a|
      coord_pair = a.split(',').map {|x| x.to_f }
      coords_array << coord_pair
    end
    coords_array
  end

  def replace_fabric_urls(image_id, new_url)
    selected_paths = @paths.xpath('//*[@image-id="' + image_id +'"]')
    selected_paths.each do |path|
      style_array = path["style"].split(';')
      fill_index = 0
      style_array.each_with_index do |style_attribute, index|
        if style_attribute.start_with?("fill:")
          fill_index = index
        end
      end
      fill_value = ["fill:#{new_url}"]
      style_array[fill_index] = fill_value
      new_style = style_array.join(';')
      path["style"] = new_style
    end
    @svg
  end
  
  # need this old stinker for testing blocks with no fill
  # not great, as it artificially puts a fill in without giving that fill info at the top
  # KEA investigate: fill =  vs fill:
  def replace_fabric_urls(new_url)
    #patterns
    paths = @svg.css("path")
    paths.each do |path|
      path["fill"] = "url('#"  + new_url + "')"
    end
    @svg
  end

  # irb(main):001:0> "fill:none".scan(/:(\S*$)/)
  # => [["none"]]
  # irb(main):002:0> "fill:none".scan(/:(\S*$)/)[0]
  # => ["none"]
  # irb(main):003:0> "fill:none".scan(/:(\S*$)/)[0][0]
  # => "none"
  # irb(main):004:0>
